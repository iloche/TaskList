// üçÑ‚≠êüçÑ‚≠êüçÑ‚≠êüçÑ‚≠êüçÑ‚≠êüçÑ‚≠êüçÑ‚≠êüçÑ‚≠êüçÑ‚≠êüçÑ‚≠êüçÑ‚≠êüçÑ‚≠êüçÑ‚≠êüçÑ‚≠êüçÑ‚≠ê

// ‚≠ê // // // // //  D√©claration de variables // // // // // // // // // /üçÑ

// üçÑ‚≠êüçÑ‚≠êüçÑ‚≠êüçÑ‚≠êüçÑ‚≠êüçÑ‚≠êüçÑ‚≠êüçÑ‚≠êüçÑ‚≠êüçÑ‚≠êüçÑ‚≠êüçÑ‚≠êüçÑ‚≠êüçÑ‚≠êüçÑ‚≠ê

let addBtn = document.querySelector(".addBtn"),
    taskName = document.querySelector(".task-name"),
    date = document.querySelector(".date"),
    textarea = document.querySelector("textarea"),
    tubeList = document.querySelector(".tube-list"),
    tasksTube = [],
    taskDone = [],
    sortBtn = document.querySelector(".sortBtn"),
    doneList = document.querySelector(".done-list"),
    wrapper = document.querySelector(".wrapper")

// üéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ 

// ‚≠ê // // // // // // // // Fonctions // // // // // // // // // // // // /‚≠ê

// üéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ 

function checkEmpty() {
    if (doneList.childElementCount !== 0) {
        doneList.innerHTML = ``;
    } else {
        doneList.innerHTML = `No task done`;
    }
}

// Fonction pour afficher les t√¢ches dans ma tubeList puis qui va les d√©placer dans ma doneList 
function displayTasks() {
    // Suppression du contenu actuel de tubeList
    tubeList.innerHTML = "";

    // Suppression du contenu actuel de doneList
    doneList.innerHTML = '';

    // Parcours du tableau des t√¢ches et cr√©ation des √©l√©ments HTML correspondants
    tasksTube.forEach((task) => {
        // Cr√©ation de la date format√©e (convertit la date en une cha√Æne de caract√®res repr√©sentant la date au format local (ici "fr-FR"))
        let formattedDate = new Date(task.date).toLocaleDateString("fr-FR");
        tubeList.innerHTML += `
            <details>
                <summary>
                    <span class="check">
                        <input type="checkbox">
                        <label>${task.name}</label>
                    </span>
                    <span class="dateCheck">${formattedDate}<span class="delete-task" title="Supprimer la t√¢che">üóëÔ∏è</span></span>
                </summary>
                <p>${task.description}</p>
            </details>
        `;
    });
}

// Fonction de tri des t√¢ches par date
function sortByDate() {
    // Utilisation de la m√©thode sort() pour trier les t√¢ches
    tasksTube.sort((a, b) => {
        // Convertir les dates des t√¢ches a et b en objets Date
        let dateA = new Date(a.date);
        let dateB = new Date(b.date);

        // Comparaison des dates
        // Si dateA est avant dateB, renvoyer un nombre n√©gatif (la t√¢che a vient avant la t√¢che b)
        // Si dateA est apr√®s dateB, renvoyer un nombre positif (la t√¢che b vient avant la t√¢che a)
        // Si les dates sont √©gales, renvoyer 0 (aucun changement d'ordre)
        return dateA - dateB;
    });
}    

// üèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è  

// ‚≠ê // // // // // // // √âvenements // // // // // // // // // // // //‚≠ê

// üèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è

// √âv√©nement sur le bouton "Ajouter"
addBtn.addEventListener("click", () => {
    if(taskName.value.trim() !== "" && textarea.value.trim() !== ""){
        checkEmpty(doneList)

        // Cr√©ation d'un objet repr√©sentant la t√¢che √† ajouter
        let taskObjet = {
            name : taskName.value,
            date: date.value,
            description: textarea.value
        };

        // Ajout de l'objet √† tasksTube
        tasksTube.push(taskObjet);

        // Appel de la fonction pour afficher les t√¢ches
        displayTasks();

        // Sauvegarder taskTubeTable dans le localStorage
        localStorage.setItem('taskDone', JSON.stringify(taskDone));

        // R√©initialiser les champs de saisie
        taskName.value = ""
        date.value = ""
        textarea.value = ""

        checkEmpty()

        } else {
            alert("Veuillez remplir tous les champs.")
        }
        console.log(tasksTube);
});

// √âv√©nement sur le bouton de "Trier"
sortBtn.addEventListener("click", () => {
    sortByDate(); // Appel de la fonction de tri par date
    displayTasks(); // R√©affichage des t√¢ches tri√©es
});

// √âv√©nement sur le conteneur wrapper pour g√©rer les actions sur les t√¢ches
wrapper.addEventListener('click', (e) => {
    // Trouver l'√©l√©ment parent <details> de l'√©l√©ment cliqu√©
    let detailsElement = e.target.closest('details')

    // V√©rifier si l'√©l√©ment cliqu√© est une checkbox
    if (e.target.type === 'checkbox') {
        let index = e.target.closest("details").getAttribute('data-index');
        // V√©rifier si l'√©l√©ment parent appartient √† la liste principale (tubeList)
        if (tubeList.contains(detailsElement)) {
            // D√©placer l'√©l√©ment vers la liste "doneList"
            doneList.appendChild(detailsElement);
            // Ajouter une classe pour marquer la t√¢che comme effectu√©e
            detailsElement.classList.add('task-done');
        } else if (doneList.contains(detailsElement)) {
            // Retirer l'√©l√©ment de doneList
            doneList.removeChild(detailsElement);
            // // V√©rifier si doneList est vide apr√®s suppression
            // if (doneList.children.length === 0) {
            //     doneList.innerHTML = "<p>No task done</p>"; // Afficher un message si la liste est vide
            // }
        }
    }

    // V√©rifier si l'√©l√©ment cliqu√© a la classe "delete-task"
    if (e.target.classList.contains('delete-task')) {
        // Trouver l'√©l√©ment <details> parent de l'ic√¥ne de corbeille
        detailsElement = e.target.closest('details'),
        index = e.target.closest("details").getAttribute('data-index');
        // Supprimer l'√©l√©ment <details> de l'affichage
        detailsElement.remove();
        // Supprimer la t√¢che de taskTubeTable
        tasksTube.splice(index, 1)
    }
});

// // Charger les t√¢ches √† partir du localStorage au chargement de la page
// window.addEventListener('load', function() {
//     // V√©rifier si des t√¢ches sont d√©j√† stock√©es dans le localStorage
//     if (localStorage.getItem('tasksTube')) {
//         // Si des t√¢ches sont trouv√©es, les charger dans le tableau taskArray
//         taskTubeTable = JSON.parse(localStorage.getItem('tasksTube'));
//         // Mettre √† jour la liste des t√¢ches affich√©e
//         displayTasks();
//     }

//     // V√©rifier si des t√¢ches termin√©es sont d√©j√† stock√©es dans le localStorage
//     if (localStorage.getItem('taskDone')) {
//         // Si des t√¢ches termin√©es sont trouv√©es, les charger dans le tableau taskDone
//         taskDoneTable = JSON.parse(localStorage.getItem('taskDone'));
//     }
// });