// üçÑ‚≠êüçÑ‚≠êüçÑ‚≠êüçÑ‚≠êüçÑ‚≠êüçÑ‚≠êüçÑ‚≠êüçÑ‚≠êüçÑ‚≠êüçÑ‚≠êüçÑ‚≠êüçÑ‚≠êüçÑ‚≠êüçÑ‚≠êüçÑ‚≠ê

// ‚≠ê // // // // //  D√©claration de variables // // // // // // // // // /üçÑ

// üçÑ‚≠êüçÑ‚≠êüçÑ‚≠êüçÑ‚≠êüçÑ‚≠êüçÑ‚≠êüçÑ‚≠êüçÑ‚≠êüçÑ‚≠êüçÑ‚≠êüçÑ‚≠êüçÑ‚≠êüçÑ‚≠êüçÑ‚≠êüçÑ‚≠ê

let addBtn = document.querySelector(".addBtn"),
    taskName = document.querySelector(".task-name"),
    date = document.querySelector(".date"),
    textarea = document.querySelector("textarea"),
    tubeList = document.querySelector(".tube-list"),
    tasksTube = [],
    taskDone = [],
    sortBtn = document.querySelector(".sortBtn"),
    doneList = document.querySelector(".done-list"),
    wrapper = document.querySelector(".wrapper")

// üéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ 

// ‚≠ê // // // // // // // // Fonctions // // // // // // // // // // // // /‚≠ê

// üéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ‚≠êüéÄ 

function checkEmpty() {
    if (doneList.childElementCount === 0) {
        doneList.innerHTML = `No task done`;
    }
    if (tubeList.childElementCount === 0) {
        tubeList.innerHTML = `No task in the tube`;
    }
}
checkEmpty()

// Fonction pour afficher les t√¢ches dans ma tubeList puis qui va les d√©placer dans ma doneList 
function displayTasks() {
    // Suppression du contenu actuel de tubeList
    tubeList.innerHTML = "";

    // Parcours du tableau des t√¢ches et cr√©ation des √©l√©ments HTML correspondants
    tasksTube.forEach((task, index) => {
        // Cr√©ation de la date format√©e (convertit la date en une cha√Æne de caract√®res repr√©sentant la date au format local (ici "fr-FR"))
        let formattedDate = new Date(task.date).toLocaleDateString("fr-FR");
        tubeList.innerHTML += `
            <details data-index="${index}">
                <summary>
                    <span class="check">
                        <input type="checkbox">
                        <label>${task.name}</label>
                    </span>
                    <span class="dateCheck">${formattedDate}<span class="delete-task" title="Supprimer la t√¢che">üóëÔ∏è</span></span>
                </summary>
                <p>${task.description}</p>
            </details>
        `;
    });
    checkEmpty()
}

function displayDoneTask(){
    taskDone.forEach((task) => {
        doneList.innerHTML += `
        <details>
            <summary>
                <span class="check">‚úì${task.name}</span><span class="delete-task" title="Supprimer la t√¢che">üóëÔ∏è</span>
            </summary>
            <p>${task.description}</p>
        </details>
        `
    });
}

// Fonction de tri des t√¢ches par date
function sortByDate() {
    // Utilisation de la m√©thode sort() pour trier les t√¢ches
    tasksTube.sort((a, b) => {
        // Convertir les dates des t√¢ches a et b en objets Date
        let dateA = new Date(a.date);
        let dateB = new Date(b.date);

        // Comparaison des dates
        // Si dateA est avant dateB, renvoyer un nombre n√©gatif (la t√¢che a vient avant la t√¢che b)
        // Si dateA est apr√®s dateB, renvoyer un nombre positif (la t√¢che b vient avant la t√¢che a)
        // Si les dates sont √©gales, renvoyer 0 (aucun changement d'ordre)
        return dateA - dateB;
    });
}    

// üèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è  

// ‚≠ê // // // // // // // √âvenements // // // // // // // // // // // //‚≠ê

// üèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è‚≠êüèµÔ∏è

// √âv√©nement sur le bouton "Ajouter"
addBtn.addEventListener("click", () => {
    if(taskName.value.trim() !== "" && textarea.value.trim() !== ""){

        // Cr√©ation d'un objet repr√©sentant la t√¢che √† ajouter
        let taskObjet = {
            name : taskName.value,
            date: date.value,
            description: textarea.value
        };

        // Ajout de l'objet √† tasksTube
        tasksTube.push(taskObjet);

        // Appel de la fonction pour afficher les t√¢ches
        displayTasks();

        // R√©initialiser les champs de saisie
        taskName.value = ""
        date.value = ""
        textarea.value = ""

        } else {
            alert("Veuillez remplir tous les champs.")
        }
        // console.log(tasksTube);
        // console.log(taskDone);
});

// √âv√©nement sur le bouton de "Trier"
sortBtn.addEventListener("click", () => {
    sortByDate(); // Appel de la fonction de tri par date
    displayTasks(); // R√©affichage des t√¢ches tri√©es

    // Sauvegarder tasksTube dans le localStorage
    localStorage.setItem('tasksTube', JSON.stringify(tasksTube));
});

// √âv√©nement sur le conteneur wrapper pour g√©rer les actions sur les t√¢ches
wrapper.addEventListener('click', (e) => {
    // Trouver l'√©l√©ment parent <details> de l'√©l√©ment cliqu√©
    let detailsElement = e.target.closest('details')

    // V√©rifier si l'√©l√©ment cliqu√© est une checkbox
    if (e.target.type === 'checkbox') {
        let index = e.target.closest("details").getAttribute('data-index');
        if(taskDone.length === 0){
        // Suppression du contenu actuel de doneList
                doneList.innerText = '';
        }
        
        taskDone.push(tasksTube[index])
        console.log(taskDone)
        // console.log(tasksTube)
        tasksTube.splice(index, 1)
        e.target.parentElement.parentElement.parentElement.remove()

        displayDoneTask()
        displayTasks()
        checkEmpty()
        // Sauvegarder tasksTube dans le localStorage
        localStorage.setItem('tasksTube', JSON.stringify(tasksTube));
        // Sauvegarder taskDone dans le localStorage
        localStorage.setItem('taskDone', JSON.stringify(taskDone));

        // V√©rifier si le nombre de t√¢ches termin√©es d√©passe 5
        if (taskDone.length > 5) {
            // Supprimer la t√¢che la plus ancienne (la premi√®re dans le tableau taskDone)
            taskDone.shift();
            // Mettre √† jour le localStorage avec les t√¢ches termin√©es mises √† jour
            localStorage.setItem('taskDone', JSON.stringify(taskDone));
            // Mettre √† jour l'affichage des t√¢ches termin√©es
            displayDoneTask();
        }
       
    }

    // V√©rifier si l'√©l√©ment cliqu√© a la classe "delete-task"
    if (e.target.classList.contains('delete-task')) {
        // Trouver l'√©l√©ment <details> parent de l'ic√¥ne de corbeille
        detailsElement = e.target.closest('details'),
        index = e.target.closest("details").getAttribute('data-index');
        // Supprimer l'√©l√©ment <details> de l'affichage
        detailsElement.remove();
        // Supprimer la t√¢che de taskTubeTable
        tasksTube.splice(index, 1)
        taskDone.splice(index, 1)
        // console.log(tasksTube)
        // console.log(taskDone)
        checkEmpty()
    }
});

// Charger les t√¢ches √† partir du localStorage au chargement de la page
window.addEventListener('load', function() {
    // V√©rifier si des t√¢ches sont d√©j√† stock√©es dans le localStorage
    if (localStorage.getItem('tasksTube')) {
        // Charger les t√¢ches dans tasksTube uniquement si des donn√©es existent
        tasksTube = JSON.parse(localStorage.getItem('tasksTube'));
        // Mettre √† jour la liste des t√¢ches affich√©e
        displayTasks();

        // if (taskDone.length > 5) {
        //     // Supprimer la t√¢che la plus ancienne (la premi√®re dans le tableau taskDone)
        //     taskDone.shift();
        //     // Mettre √† jour le localStorage avec les t√¢ches termin√©es mises √† jour
        //     localStorage.setItem('taskDone', JSON.stringify(taskDone));
        //     // Mettre √† jour l'affichage des t√¢ches termin√©es
        //     displayDoneTask();
        // }               
    }

    // V√©rifier si des t√¢ches termin√©es sont d√©j√† stock√©es dans le localStorage
    if (localStorage.getItem('taskDone')) {
        // Charger les t√¢ches termin√©es dans taskDone uniquement si des donn√©es existent
        taskDone = JSON.parse(localStorage.getItem('taskDone'));
    }
});

// √âv√©nement de validation √† la touche "Enter"
textarea.addEventListener("keyup", function(event){
    if(event.key === "Enter"){
        addBtn.click()
    }
})